<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on r21nomi.log</title>
    <link>http://www.ryotaniinomi.com/post/</link>
    <description>Recent content in Posts on r21nomi.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 29 Jul 2017 16:30:44 +0900</lastBuildDate>
    <atom:link href="http://www.ryotaniinomi.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>glsl-livecoderを正常に使えるようにするまで</title>
      <link>http://www.ryotaniinomi.com/post/2017/glsl-live-coder/</link>
      <pubDate>Sat, 29 Jul 2017 16:30:44 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2017/glsl-live-coder/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/fand/glsl-livecoder&#34;&gt;glsl-livecoder&lt;/a&gt;はglslでライブコーディングを行うためのAtomパッケージである。&lt;br /&gt;
正常に動作できるようになるまでにやや手こずったのでメモしておく。&lt;/p&gt;

&lt;p&gt;実行環境は、&lt;code&gt;macOS 10.12.5&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&#34;glsl-livecoderのインストール&#34;&gt;glsl-livecoderのインストール&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ apm install glsl-livecoder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だが、Atomの設定で&lt;code&gt;glslangValidator&lt;/code&gt;のパスを指定しないと正常に動かない。&lt;br /&gt;
自分は&lt;code&gt;glslangValidator&lt;/code&gt;をインストールしてなかったので、次のステップで方法を紹介。&lt;br /&gt;
なかなかめんどくさい。&lt;/p&gt;

&lt;h1 id=&#34;glslangvalidatorのインストール&#34;&gt;glslangValidatorのインストール&lt;/h1&gt;

&lt;p&gt;基本的にリポジトリに記載されている&lt;a href=&#34;https://github.com/KhronosGroup/glslang#build-steps&#34;&gt;ビルドステップ&lt;/a&gt;通りにやれば良いわけだが、わかりづらい。&lt;br /&gt;
なので、以下に自分がやったステップを紹介する。&lt;/p&gt;

&lt;h3 id=&#34;1-khronosgroup-glslang-https-github-com-khronosgroup-glslang-リポジトリをクローン&#34;&gt;1. &lt;a href=&#34;https://github.com/KhronosGroup/glslang&#34;&gt;KhronosGroup/glslang&lt;/a&gt;リポジトリをクローン&lt;/h3&gt;

&lt;h3 id=&#34;2-cmake-https-cmake-org-のインストール&#34;&gt;2. &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;のインストール&lt;/h3&gt;

&lt;p&gt;CMakeはクロスプラットフォームのビルドツール。&lt;br /&gt;
自分は、&lt;a href=&#34;https://cmake.org/download/&#34;&gt;ダウンロードページ&lt;/a&gt;から&lt;code&gt;cmake-3.9.0-Darwin-x86_64.dmg&lt;/code&gt;をインストールした。&lt;/p&gt;

&lt;h3 id=&#34;3-cmakeをコマンドラインから使えるよう設定&#34;&gt;3. CMakeをコマンドラインから使えるよう設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo &amp;quot;/Applications/CMake.app/Contents/bin/cmake-gui&amp;quot; --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで&lt;code&gt;$ cmake&lt;/code&gt;が使えるようになる。&lt;br /&gt;
この設定コマンドは、&lt;code&gt;CMake.app&lt;/code&gt;の&lt;code&gt;Tools/How to Install For Command Line Use&lt;/code&gt;に記載されている。&lt;/p&gt;

&lt;h3 id=&#34;4-glslang-リポジトリの-ビルドステップ-https-github-com-khronosgroup-glslang-build-steps-に沿って実行&#34;&gt;4. &lt;code&gt;glslang&lt;/code&gt;リポジトリの&lt;a href=&#34;https://github.com/KhronosGroup/glslang#build-steps&#34;&gt;ビルドステップ&lt;/a&gt;に沿って実行&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glslang#1-check-out-this-project&#34;&gt;1) Check-Out this project&lt;/a&gt;&lt;br /&gt;
すでにクローンしてるのでスキップ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glslang#2-check-out-external-projects&#34;&gt;2) Check-Out External Projects&lt;/a&gt;&lt;br /&gt;
必要なステップだったか正直わからないが、一応1)で作ったディレクトリ内にクローンしておいた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glslang#3-configure&#34;&gt;3) Configure&lt;/a&gt;&lt;br /&gt;
Mac上での作業だったが、wnidow向けとして書かれていたステップで実行。&lt;br /&gt;
glslangをクローンしたディレクトリ上で下記コマンドを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cmake ./ -DCMAKE_INSTALL_PREFIX=`pwd`/install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glslang#4-build-and-install&#34;&gt;4) Build and Install&lt;/a&gt;&lt;br /&gt;
こちらも&lt;code&gt;for Windows&lt;/code&gt;と書かれている方で実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cmake --build . --config {Release|Debug|MinSizeRel|RelWithDebInfo} \ --target install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、ドキュメントに記載されてた上記コマンドだと諸々のコマンドが見つからない旨のエラーが出た。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-bash: Debug: command not found
-bash: MinSizeRel: command not found
-bash: RelWithDebInfo}: command not found
make[2]: *** [hlsl/CMakeFiles/HLSL.dir/depend] Error 141
make[1]: *** [hlsl/CMakeFiles/HLSL.dir/all] Error 2
make: *** [all] Error 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、congif指定を外して実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cmake --build . --target install
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;...
-- Installing: /Users/r21nomi/workspace/shader/glslang/install/bin/glslangValidator
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;glslangValidator&lt;/code&gt;がインストールされたので、これで準備完了。&lt;/p&gt;

&lt;h1 id=&#34;glsl-livecoderでglslangvalidatorのパスを設定&#34;&gt;glsl-livecoderでglslangValidatorのパスを設定&lt;/h1&gt;

&lt;p&gt;Atomの&lt;code&gt;Preferences -&amp;gt; glsl-livecoderのSettings&lt;/code&gt;から&lt;code&gt;glslangValidator path&lt;/code&gt;欄にインストールした&lt;code&gt;glslangValidator&lt;/code&gt;のパスを設定。&lt;br /&gt;
自分の場合は&lt;code&gt;/Users/r21nomi/workspace/shader/glslang/install/bin/glslangValidator&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;これでシェーダーファイルを開いて&lt;code&gt;ctrl-enter&lt;/code&gt;とかやるとシェーダープログラムがコンパイルされて、背景に描画されるようになる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git管理下から除外したgoogle-services.jsonをCircle CIから読み込む</title>
      <link>http://www.ryotaniinomi.com/post/2017/circle_ci_google_services_json/</link>
      <pubDate>Sat, 27 May 2017 14:22:26 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2017/circle_ci_google_services_json/</guid>
      <description>

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;jsonファイルをbase64化してテキストにする&lt;/li&gt;
&lt;li&gt;それをCircle CIの環境変数に設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;circle.yml&lt;/code&gt;でjsonファイルにデコードする命令を書く&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;google-services.json&lt;/code&gt;はFirebaseなどのgoogleサービスと連携するために必要なファイルだが、これはプライベートな情報であるためGithub等のpublicリポジトリの管理下に置くべきではない。&lt;/p&gt;

&lt;p&gt;だが、単純にファイルを除外するだけだとCIサービスからファイルを参照できなくなり、ビルドに失敗する。&lt;/p&gt;

&lt;p&gt;Circle CIでは&lt;a href=&#34;https://circleci.com/docs/1.0/google-auth/&#34;&gt;ドキュメントに方法が記載されている&lt;/a&gt;が、Firebaseの場合、単純にこの通りではうまくいかないので、本記事ではファイルを除外し、Circle CIで正常にビルドできるようにするまでをメモしておく。&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;google-services-jsonの除外&#34;&gt;google-services.jsonの除外&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;に&lt;code&gt;google-services.json&lt;/code&gt;を追加すればok。&lt;/p&gt;

&lt;h3 id=&#34;google-services-jsonをbase64化&#34;&gt;google-services.jsonをbase64化&lt;/h3&gt;

&lt;p&gt;ターミナルから以下コマンドを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl base64 -in &amp;lt;SOURCE_FILE_NAME&amp;gt; -out &amp;lt;OUT_FILE_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;circle-ciの環境変数に登録&#34;&gt;Circle CIの環境変数に登録&lt;/h3&gt;

&lt;p&gt;Circle CIプロジェクト設定の&lt;code&gt;Environment Variables&lt;/code&gt;に追加する。&lt;/p&gt;

&lt;p&gt;例えば、こんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GOOGLE_SERVICES_JSON&lt;/code&gt; &lt;code&gt;xxxxxxxxx...&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;circle-ymlの設定&#34;&gt;circle.ymlの設定&lt;/h3&gt;

&lt;p&gt;設定した環境変数のテキストをjsonファイルにデコードする処理を書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies:
  pre:
    ...
    - echo $GOOGLE_SERVICES_JSON | base64 --decode --ignore-garbage &amp;gt; ${HOME}/${CIRCLE_PROJECT_REPONAME}/app/google-services.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/1.0/google-auth/&#34;&gt;CircleCIのドキュメント&lt;/a&gt;では&lt;code&gt;${HOME}/gcloud-service-key.json&lt;/code&gt;となっているが、これだと&lt;code&gt;no such file or directory&lt;/code&gt;的なエラーが出るので、プロジェクト名とモジュール名（Firebaseで利用する際にはこの直下にjsonファイルを置くことになるので）も指定する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt;まで指定しないとデコード処理は通るが、アプリのビルド処理でファイルが見つからずコケることになる。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;code&gt;${HOME}&lt;/code&gt;は&lt;code&gt;/home/ubuntu&lt;/code&gt;、&lt;code&gt;${CIRCLE_PROJECT_REPONAME}&lt;/code&gt;はプロジェクト名が返る。&lt;/p&gt;

&lt;p&gt;これで正常にビルドできるようになった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Piで動かすAndroid Thingsの画面を回転させる</title>
      <link>http://www.ryotaniinomi.com/post/2017/android_things_display_rotate/</link>
      <pubDate>Sun, 23 Apr 2017 16:21:06 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2017/android_things_display_rotate/</guid>
      <description>

&lt;p&gt;Android Thingsで作ったアプリを表示する画面を縦向きにしたかったので調査してみた。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;結論から先に言うと、Android Things Developer Preview 3.1でRaspberry Piの画面を縦にするのはできない（表示がぐちゃぐちゃになる）。&lt;/del&gt;&lt;br /&gt;
&lt;del&gt;上下逆さまにするのは可能。&lt;/del&gt;&lt;br /&gt;
※追記 2017.07.17&lt;br /&gt;
&lt;a href=&#34;https://developer.android.com/things/preview/releases.html#developer_preview_41&#34;&gt;Developer Preview 4.1&lt;/a&gt;では改善されていた。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;任意のディレクトリに&lt;code&gt;mnt/disk&lt;/code&gt;フォルダを作成&lt;/li&gt;
&lt;li&gt;マウントするディスク名を確認
&lt;code&gt;$ diskutil list&lt;/code&gt;で確認。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ diskutil list
/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         251.0 GB   disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:          Apple_CoreStorage Macintosh HD            250.0 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3

/dev/disk1 (internal, virtual):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:                  Apple_HFS Macintosh HD           +249.7 GB   disk1
                                 Logical Volume on disk0s2
                                 1B8724D6-D1C3-4B9E-81D2-2044A29AB042
                                 Unlocked Encrypted

/dev/disk2 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *8.0 GB     disk2
   1: 314F99D5-B2BF-4883-8D03-E2F2CE507D6A               67.1 MB    disk2s1
   2: 314F99D5-B2BF-4883-8D03-E2F2CE507D6A               1.0 MB     disk2s2
   3: 314F99D5-B2BF-4883-8D03-E2F2CE507D6A               1.0 MB     disk2s3
   4: BB499290-B57E-49F6-BF41-190386693794               33.6 MB    disk2s4
   5: BB499290-B57E-49F6-BF41-190386693794               33.6 MB    disk2s5
   6: 0F2778C4-5CC1-4300-8670-6C88B7E57ED6               536.9 MB   disk2s6
   7: 0F2778C4-5CC1-4300-8670-6C88B7E57ED6               536.9 MB   disk2s7
   8: B598858A-5FE3-418E-B8C4-824B41F4ADFC               65.5 KB    disk2s8
   9: B598858A-5FE3-418E-B8C4-824B41F4ADFC               65.5 KB    disk2s9
  10: 6B2378B0-0FBC-4AA9-A4F6-4D6E17281C47               1.0 MB     disk2s10
  11: AA3434B2-DDC3-4065-8B1A-18E99EA15CB7               33.6 MB    disk2s11
  12: AA3434B2-DDC3-4065-8B1A-18E99EA15CB7               33.6 MB    disk2s12
  13: 314F99D5-B2BF-4883-8D03-E2F2CE507D6A               268.4 MB   disk2s13
  14: 314F99D5-B2BF-4883-8D03-E2F2CE507D6A               268.4 MB   disk2s14
  15: 0BB7E6ED-4424-49C0-9372-7FBAB465AB4C               2.7 GB     disk2s15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回マウントするのは&lt;code&gt;/dev/disk2&lt;/code&gt;のディスク&lt;/p&gt;

&lt;h2 id=&#34;マウント-書き込み-マウント解除&#34;&gt;マウント、書き込み、マウント解除&lt;/h2&gt;

&lt;p&gt;ここでは、マウント先ディレクトリはホームディレクトリ直下に作った&lt;code&gt;mnt/disk&lt;/code&gt;とする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# マウント①
$ sudo mount -t msdos /dev/disk2s1 ./mnt/disk
# 書き込み②
$ echo &#39;display_rotate=1&#39; &amp;gt;&amp;gt; ./mnt/disk/config.txt
# マウント解除③
$ sudo umount ./mnt/disk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;マウント前
&lt;img src=&#34;../../../images/2017/android_things_display_rotate/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;①マウント後
書き込みできるようになるまで（このアイコンに変わるまで）ほんの少し時間がかかるので、finderでフォルダアイコンが変わるのを確認してから次の書き込みコマンドを実行すると良い。
&lt;img src=&#34;../../../images/2017/android_things_display_rotate/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;②書き込み後
&lt;code&gt;display_rotate=1&lt;/code&gt;がある。&lt;br /&gt;
&lt;code&gt;display_rotate=1&lt;/code&gt;は時計回りに90°回転の意味。
&lt;img src=&#34;../../../images/2017/android_things_display_rotate/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;③マウント解除
finder上の&lt;code&gt;mnt/disk&lt;/code&gt;の表示がマウント前の状態に戻る。
この状態であればmicrosdの取り出しが可能。&lt;/p&gt;

&lt;p&gt;raspberry piを起動。
&lt;img src=&#34;../../../images/2017/android_things_display_rotate/rotate_1.jpg&#34; alt=&#34;&#34; /&gt;
&lt;del&gt;&lt;code&gt;display_rotate=1&lt;/code&gt;だと画面表示が崩れてしまう。&lt;/del&gt;※1&lt;br /&gt;
&lt;del&gt;&lt;code&gt;display_rotate=2&lt;/code&gt;なら正常に上下逆さまになる。&lt;/del&gt;※1&lt;/p&gt;

&lt;h3 id=&#34;mountについて&#34;&gt;mountについて&lt;/h3&gt;

&lt;p&gt;mountとはディスク装置を読み書きできるようにする作業のこと。&lt;/p&gt;

&lt;p&gt;usbメモリなどをPCに接続すると画像のようなアイコンがでるが、これがマウントされている状態。&lt;br /&gt;
通常のディスクは接続するだけで自動でマウントされることがほとんどだが、読み込み不可になっているディスクを強制的に読み込む場合などに&lt;code&gt;mount&lt;/code&gt;コマンドを用いればマウント状態にすることができる。
&lt;img src=&#34;../../../images/2017/android_things_display_rotate/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ mount -t タイプ デバイス マウント先ディレクトリ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://eng-entrance.com/linux-command-mount&#34;&gt;http://eng-entrance.com/linux-command-mount&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;display-rotateの値による効果&#34;&gt;display_rotateの値による効果&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;設定&lt;/th&gt;
&lt;th&gt;効果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;display_rotate=0&lt;/td&gt;
&lt;td&gt;標準&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;display_rotate=1&lt;/td&gt;
&lt;td&gt;時計回りに90°回転する&lt;del&gt;（Android Thingsではうまくいかない）&lt;/del&gt;※1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;display_rotate=2&lt;/td&gt;
&lt;td&gt;時計回りに180°回転する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;display_rotate=3&lt;/td&gt;
&lt;td&gt;時計回りに270°回転する&lt;del&gt;（Android Thingsではうまくいかない）&lt;/del&gt;※1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;display_rotate=0x10000&lt;/td&gt;
&lt;td&gt;横方向に裏返す&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;display_rotate=0x20000&lt;/td&gt;
&lt;td&gt;縦方向に裏返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;※ディスプレイがタッチスクリーンの場合は&lt;code&gt;lcd_rotate&lt;/code&gt;を使う。&lt;/p&gt;

&lt;p&gt;※1 Developer Preview 4.1では改善済み。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/41165198/android-things-with-rasp3-7-inch-touchscreen/&#34;&gt;http://stackoverflow.com/questions/41165198/android-things-with-rasp3-7-inch-touchscreen/&lt;/a&gt;
&lt;a href=&#34;http://stackoverflow.com/questionunt](http://eng-entrance.com/linux-command-mount&#34;&gt;http://stackoverflow.com/questionunt](http://eng-entrance.com/linux-command-mount&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1日1スケッチのススメ</title>
      <link>http://www.ryotaniinomi.com/post/2016/adventcalendar_creative_coding/</link>
      <pubDate>Tue, 20 Dec 2016 07:21:36 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2016/adventcalendar_creative_coding/</guid>
      <description>

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/creative-coding&#34;&gt;クリエイティブコーディング Advent Calendar 2016&lt;/a&gt; 20日目の投稿である。&lt;/p&gt;

&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;1日1個スケッチをする&lt;/li&gt;
&lt;li&gt;1テーマに決めてやる&lt;/li&gt;
&lt;li&gt;30分でやる&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;1日1スケッチ&#34;&gt;1日1スケッチ&lt;/h1&gt;

&lt;p&gt;毎日30分、決めたテーマに沿ってスケッチをする。&lt;br /&gt;
自分の場合はopenFrameworksを使うのだが、processingでもjavascriptでも何でも良いと思う。&lt;br /&gt;
30分1テーマってところがポイントで、毎日継続することに意味がある。&lt;br /&gt;
この活動のインスパイア元は「&lt;a href=&#34;http://30min-processing.hatenablog.com/&#34;&gt;30 min. Processing&lt;/a&gt;」というブログ。&lt;/p&gt;

&lt;h1 id=&#34;目的&#34;&gt;目的&lt;/h1&gt;

&lt;h3 id=&#34;動きの学習のため&#34;&gt;動きの学習のため&lt;/h3&gt;

&lt;p&gt;アプリ, web, インスタレーション問わず目に見える部分に凝りたいと思っているので、動きの学習をすることはカッコよく気持ち良いモノをつくるのに重要だ。&lt;/p&gt;

&lt;p&gt;また、自分は普段はアプリをつくる仕事をしているのだが、クリエイティブコーディングのアルゴリズムは他のプラットフォーム（アプリ、web）のインタラクション実装にも活かせると思う。&lt;br /&gt;
この辺りは別の機会にまとめたい。&lt;/p&gt;

&lt;h3 id=&#34;楽しい&#34;&gt;楽しい&lt;/h3&gt;

&lt;p&gt;カッコイイもの、気持ち良いものをつくるのは単純に楽しい。&lt;/p&gt;

&lt;h1 id=&#34;やり方&#34;&gt;やり方&lt;/h1&gt;

&lt;p&gt;やり方ってほどでもないが、自分がいつもやっていることを書く。&lt;/p&gt;

&lt;h3 id=&#34;1テーマを決めてやる&#34;&gt;1テーマを決めてやる&lt;/h3&gt;

&lt;p&gt;テーマを決めてやることでその実装のみに集中できる。&lt;br /&gt;
例えば、&lt;code&gt;Blob&lt;/code&gt;や&lt;code&gt;Pattern&lt;/code&gt;, &lt;code&gt;Transform&lt;/code&gt;といった感じ。&lt;br /&gt;
&lt;div&gt;&lt;img src=&#34;../../../images/2016/adventcalendar_creative_coding/blob.gif&#34; width=50% /&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&#34;../../../images/2016/adventcalendar_creative_coding/pattern.gif&#34; width=50% /&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&#34;../../../images/2016/adventcalendar_creative_coding/transform.gif&#34; width=50% /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;また、テーマを決めることで一つ一つの実装量がシンプルになるので、実装方法を忘れた時に検索しやすくなるのも良いポイントである。&lt;/p&gt;

&lt;h3 id=&#34;30分でやる&#34;&gt;30分でやる&lt;/h3&gt;

&lt;p&gt;短時間に制限することで継続できるようにする。&lt;br /&gt;
30分という時間は正直短いが、前につくったスケッチを元にブラッシュアップしていくと30分でもそれなりに大きな作品にできる。&lt;br /&gt;
継続することが大事なのだ。&lt;/p&gt;

&lt;h3 id=&#34;githubにまとめておく&#34;&gt;Githubにまとめておく&lt;/h3&gt;

&lt;p&gt;コードベースでスケッチを保存する場として、&lt;a href=&#34;https://github.com/r21nomi/of-artwork&#34;&gt;Github等のリポジトリ&lt;/a&gt;にまとめておくと良い。&lt;br /&gt;
視覚的にスケッチを見れるよう、最初はトップのREADMEにGIF画像を貼っていったが次第に重くなっていったので、視覚的なスケッチの保存は別の箇所で行うことにした。&lt;/p&gt;

&lt;p&gt;また、同じテーマでブラッシュアップしていく場合でも各スケッチごとにプロジェクトをつくっておくとそれそれの違いがわかって良い。&lt;br /&gt;
&lt;div&gt;&lt;img src=&#34;../../../images/2016/adventcalendar_creative_coding/directory.png&#34; width=50% /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;gifを一覧できるページにあげる&#34;&gt;GIFを一覧できるページにあげる&lt;/h3&gt;

&lt;p&gt;ブログなど視覚的に成果を見れるページにあげておく。&lt;br /&gt;
後から視覚的に見て実装を確認できるのと、溜まっていく感が楽しいからだ。&lt;/p&gt;

&lt;p&gt;自分の場合は&lt;a href=&#34;https://ofartwork.tumblr.com/&#34;&gt;Tumblr&lt;/a&gt;に上げていっている。
&lt;div&gt;&lt;img src=&#34;../../../images/2016/adventcalendar_creative_coding/versions.png&#34; width=50% /&gt;&lt;/div&gt;
GIF画像とそのコードへのリンクを貼っておけばあとで参照できる。&lt;/p&gt;

&lt;h3 id=&#34;シェアする&#34;&gt;シェアする&lt;/h3&gt;

&lt;p&gt;これはおまけなのだが、モチベーションを維持する意味でつくったスケッチはSNSにシェアするようにしてる。&lt;br /&gt;
因みに、oFの父Zach氏も定期的にTwitterにスケッチをポストしている。&lt;br /&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;fr&#34; dir=&#34;ltr&#34;&gt;porcupine font &lt;a href=&#34;https://t.co/ftQtytlWyQ&#34;&gt;pic.twitter.com/ftQtytlWyQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; zach lieberman (@zachlieberman) &lt;a href=&#34;https://twitter.com/zachlieberman/status/810967626096803840&#34;&gt;2016年12月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;アイデアはissueにまとめておく&#34;&gt;アイデアはissueにまとめておく&lt;/h1&gt;

&lt;p&gt;いざスケッチをしようと思っても何やろうかなかなか思いつかないこともあるので、実装してみたいアイデアを
&lt;a href=&#34;https://github.com/r21nomi/of-artwork/issues&#34;&gt;issue&lt;/a&gt;とかにストックしておくと良いと思う。&lt;/p&gt;

&lt;div&gt;&lt;img src=&#34;../../../images/2016/adventcalendar_creative_coding/issue.png&#34; width=50% /&gt;&lt;/div&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;一連の流れは以下の通り。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;テーマのディレクトリを作成&lt;/li&gt;
&lt;li&gt;テーマディレクトリ配下にoFの&lt;code&gt;projectGenerator&lt;/code&gt;でprojectを作成&lt;/li&gt;
&lt;li&gt;以前のスケッチをブラッシュアップする場合は、ファイルをコピペ。Xcodeにも&lt;code&gt;add files&lt;/code&gt;でファイル追加。&lt;/li&gt;
&lt;li&gt;30分でスケッチ&lt;/li&gt;
&lt;li&gt;GIF画像で記録（自分は&lt;a href=&#34;http://www.cockos.com/licecap/&#34;&gt;LICEcap&lt;/a&gt;使ってる）&lt;/li&gt;
&lt;li&gt;Githubのリポジトリにpush&lt;/li&gt;
&lt;li&gt;TumblrにGIFをポスト&lt;/li&gt;
&lt;li&gt;SNSでシェア&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これを自分の場合は、毎朝行うようにしてる。&lt;br /&gt;
朝できなかった場合は、その日の夜か次の日に2つ投稿するなどしてる。&lt;br /&gt;
投稿できなくても自分を責めないことも継続する上では大事。&lt;/p&gt;

&lt;p&gt;30分なら毎日続けられるし、少しづつスケッチが溜まっていくのは楽しいのでとてもおすすめ。&lt;br /&gt;
ではでは。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/r21nomi/of-artwork&#34;&gt;https://github.com/r21nomi/of-artwork&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://ofartwork.tumblr.com/&#34;&gt;https://ofartwork.tumblr.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>減衰のインタラクションアルゴリズム</title>
      <link>http://www.ryotaniinomi.com/post/2016/attenuation/</link>
      <pubDate>Wed, 07 Sep 2016 00:25:18 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2016/attenuation/</guid>
      <description>&lt;p&gt;マウスの移動量に応じて値が大きくなり、徐々に値が0に戻っていく減衰のアルゴリズムを紹介する。
コードはopenFrameworks。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ofApp.h&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class ofApp : public ofBaseApp{
    public:
        float velocity = 0;
        float smooth = 0.9;
        ofVec2f pMouse;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ofApp.cpp&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void ofApp::update(){
    ofVec2f m(mouseX, mouseY);
    ofVec2f dir = m - pMouse;

    velocity = smooth * velocity + smooth * dir.x;
    pMouse.set(mouseX, mouseY);
}

void ofApp::draw(){
    ofDrawRectangle(mouseX - velocity, 0, 30 - velocity, ofGetHeight());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../../images/of/attenuation.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/r21nomi/of-basic-study/tree/master/attenuation/src&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://github.com/ofZach/funkyForms/blob/e79b4728eac983530a16e7ebae33ed2f52fb5e13/sketches/Character/src/ofApp.cpp#L11&#34;&gt;https://github.com/ofZach/funkyForms/blob/e79b4728eac983530a16e7ebae33ed2f52fb5e13/sketches/Character/src/ofApp.cpp#L11&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oFからAndroidのメソッドを呼ぶ</title>
      <link>http://www.ryotaniinomi.com/post/2016/of_android/</link>
      <pubDate>Thu, 21 Jul 2016 12:57:22 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2016/of_android/</guid>
      <description>&lt;p&gt;oFからAndroidのメソッドを呼ぶには&lt;code&gt;ofxAndroidUtils&lt;/code&gt;内のいつくかのメソッドを使う必要がある。&lt;/p&gt;

&lt;p&gt;例えば、プロジェクトフォルダが&lt;code&gt;sampleProject&lt;/code&gt;の場合、&lt;code&gt;ofApp.cpp&lt;/code&gt;から&lt;code&gt;cc.openframeworks.sampleProject.OFActivity#getId&lt;/code&gt;メソッドを呼ぶ処理を以下に書く。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OFActivity.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class OFActivity extends cc.openframeworks.OFActivity{
	...
	// ofApp.cppからこのメソッドを呼びたい
    public int getId() {
        return 10;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ofApp.h&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;ofxAndroidUtils.h&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ofApp.cpp&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void ofApp::setup(){
	// setup()は一度しか呼ばれないっぽい（バックボタンで戻った後に再度立ち上げても呼ばれない）
	ofLog(OF_LOG_NOTICE, &amp;quot;ID : &amp;quot; + ofToString(getId()));  // 10
}

// 2回目の起動以降はreloadTextures()が呼ばれるので、ここにも設定しておく必要がある
// resume()も２回目以降の起動で呼ばれるが、ここでofImage.load()とかすると画像が正しく設定されないので、reloadTextures()で処理するのが良い
void ofApp::reloadTextures(){
	ofLog(OF_LOG_NOTICE, &amp;quot;ID : &amp;quot; + ofToString(getId()));  // 10
}

// OFActivity#getIdを呼んで返り値のintを取得するメソッド
int ofApp::getId() {
    // Get env.
    JNIEnv *env = ofGetJNIEnv();
    if (!env) {
        ofLogError() &amp;lt;&amp;lt; &amp;quot;Couldn&#39;t get environment using GetEnv().&amp;quot; &amp;lt;&amp;lt; endl;
        return -1;
    }

    // Find reference for OFActivity.
    jclass localClass = env-&amp;gt;FindClass(&amp;quot;cc/openframeworks/sampleProject/OFActivity&amp;quot;);
    jclass javaClass = (jclass) env-&amp;gt;NewGlobalRef(localClass);
    if(!javaClass){
        ofLogError() &amp;lt;&amp;lt; &amp;quot;Couldn&#39;t get java class for OFActivity.&amp;quot; &amp;lt;&amp;lt; endl;
        return -1;
    }
    jobject javaObject = ofGetOFActivityObject();
    javaObject = (jobject) env-&amp;gt;NewGlobalRef(javaObject);
    if (!javaObject) {
        ofLogError() &amp;lt;&amp;lt; &amp;quot;javaObject not found.&amp;quot; &amp;lt;&amp;lt; endl;
        return -1;
    }

    // Find getId method from OFActivity.
    jmethodID javaGetIdMethod = env-&amp;gt;GetMethodID(javaClass,&amp;quot;getId&amp;quot;,&amp;quot;()I&amp;quot;);
    if(!javaGetIdMethod){
        ofLogError() &amp;lt;&amp;lt; &amp;quot;Couldn&#39;t get java getId from OFActivity.&amp;quot; &amp;lt;&amp;lt; endl;
        return -1;
    }

    return env-&amp;gt;CallIntMethod(javaObject, javaGetIdMethod);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://github.com/cpietsch/cordova-plugin-opcvExample/blob/c15d91225caff536ea9425908f61f2b9a2dc2892/of_v0.9.0_android_release/addons/ofxAndroidWebView/src/ofxAndroidWebView.cpp&#34;&gt;https://github.com/cpietsch/cordova-plugin-opcvExample/blob/c15d91225caff536ea9425908f61f2b9a2dc2892/of_v0.9.0_android_release/addons/ofxAndroidWebView/src/ofxAndroidWebView.cpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/30815284/whats-method-signature-parameter-when-calling-a-java-method-using-jni&#34;&gt;methodsignatureの種類について&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type Signature   Java Type
Z                boolean
B                byte
C                char
S                short
I                int
J                long
F                float
D                double
L fully-qualified-class ;   fully-qualified-class
[ type           type[]
( arg-types ) ret-type method type
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MICROSD TINYSHIELDを使ってTinyScreenにGIFを表示する</title>
      <link>http://www.ryotaniinomi.com/post/2016/tinyshield_micrsd/</link>
      <pubDate>Tue, 03 May 2016 21:25:40 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2016/tinyshield_micrsd/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../../../images/tinyshied_microsd/product.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tinycircuits.com/&#34;&gt;TinyScreen&lt;/a&gt;というとても小さなArduino互換のディスプレイがあるのだが、今回はこれにGIF画像を表示する方法をメモしておく。&lt;/p&gt;

&lt;h1 id=&#34;tinyscreenとは&#34;&gt;TinyScreenとは&lt;/h1&gt;

&lt;p&gt;冒頭でも述べたが、親指サイズの非常に小さなArduino互換デバイスである。&lt;br /&gt;
詳しくは、&lt;a href=&#34;https://tinycircuits.com/&#34;&gt;公式サイト&lt;/a&gt;をみると良い。&lt;/p&gt;

&lt;h1 id=&#34;microsd-tinyshieldを使ってgifを表示する&#34;&gt;MICROSD TINYSHIELDを使ってGIFを表示する&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../../../images/tinyshied_microsd/tinyshield_microsd.jpg&#34; alt=&#34;&#34; /&gt;
GIFの表示には、TinyScreen本体に加えて&lt;a href=&#34;https://tinycircuits.com/collections/all/products/microsd-tinyshield&#34;&gt;MICROSD TINYSHIELD&lt;/a&gt;と
いうモジュールが必要になる。&lt;br /&gt;
こちらは、文字通りMicroSD内のファイルを読み込めるようにするモジュールで、今回はこの中に保存されているGIFを表示する方法を紹介する。&lt;/p&gt;

&lt;p&gt;紹介といっても、すでにコードと解説は&lt;a href=&#34;https://tinycircuits.hackster.io/tbatey_tiny-circuits/tinyscreen-animated-and-static-images-abefde&#34;&gt;こちら&lt;/a&gt;に載っているので、重複する部分も多々あるがもう少し細かく説明しておこうと思う。&lt;/p&gt;

&lt;h2 id=&#34;gif-tsvファイルへの変換&#34;&gt;Gif -&amp;gt; TSVファイルへの変換&lt;/h2&gt;

&lt;p&gt;TSVとはデータとデータの間がタブで区切られているテキストファイル。&lt;br /&gt;
表示するGIF画像はこのTSV形式に変換しておかないとプログラムで表示できないので、ここではその変換を行う。&lt;/p&gt;

&lt;h3 id=&#34;準備&#34;&gt;準備&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://tinycircuits.hackster.io/tbatey_tiny-circuits/tinyscreen-animated-and-static-images-abefde&#34;&gt;こちら&lt;/a&gt;から&lt;code&gt;TSVconverter.py&lt;/code&gt;ファイルをDLする。&lt;br /&gt;
GIFファイルを&lt;code&gt;TSVconverter.py&lt;/code&gt;ファイルと同階層においておく。&lt;/p&gt;

&lt;h3 id=&#34;変換&#34;&gt;変換&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TSVconverter.py&lt;/code&gt;ファイルをpythonコマンドで実行すればTSVファイルが生成される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python TSVconverter.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;エラーが出た時の対応&#34;&gt;エラーが出た時の対応&lt;/h3&gt;

&lt;p&gt;初めて&lt;code&gt;python TSVconverter.py&lt;/code&gt;を実行する場合、おそらくこんなエラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
File &amp;quot;TSVconverter.py&amp;quot;, line 2, in &amp;lt;module&amp;gt;
from PIL import Image
ImportError: No module named PIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PIL&lt;/code&gt;がインストールされてないらしい。&lt;/p&gt;

&lt;h3 id=&#34;pil-pillow-のインストール&#34;&gt;PIL（pillow）のインストール&lt;/h3&gt;

&lt;p&gt;まずは、pipをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -kL https://bootstrap.pypa.io/get-pip.py | python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※&lt;code&gt;Permission denied: &#39;/Library/Python/2.7/site-packages/pip&#39;&lt;/code&gt;エラーが出るかもなので&lt;code&gt;sudo&lt;/code&gt;つける必要あるかも&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -kL https://bootstrap.pypa.io/get-pip.py | sudo python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gradlew lint &amp;amp;&amp;amp; android-resource-remover --xml app/build/outputs/lint-results.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、PILのforkプロジェクトであるpillowをインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パーミッションエラーが出たらsudoで実行。&lt;/p&gt;

&lt;p&gt;正常にインストールされてることを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip list
...
Pillow (3.2.0)  // インストールされてるね
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで&lt;code&gt;python TSVconverter.py&lt;/code&gt;が正常に動作するようになる。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2013/12/19/154149````````&#34;&gt;http://otiai10.hatenablog.com/entry/2013/12/19/154149````````&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;実行&#34;&gt;実行&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://codebender.cc/sketch:276406&#34;&gt;こちら&lt;/a&gt;のプログラムをcodebenderから実行するとプログラムが書き込まれてフォルダの選択画面が表示されるはず。。&lt;br /&gt;
あとは、ディスプレイ横のボタンでメニューを選べばGIFを表示できると思う。&lt;/p&gt;

&lt;h1 id=&#34;余談&#34;&gt;余談&lt;/h1&gt;

&lt;p&gt;完成品をネックレスにするためにケースを探したのだが、それには東急ハンズの&lt;a href=&#34;https://hands.net/goods/2400005479593/&#34;&gt;プラスチックキューブ　角　クリア　36mm&lt;/a&gt;がちょうどよかった。&lt;br /&gt;
ただ、MicroSDがささってるとちゃんと収まらなかったり、横のボタンが押せなかったりするので、そこは切ったり穴をあけたりと加工した。&lt;/p&gt;

&lt;p&gt;なかなか良い感じに仕上がったので満足しているが、やはりずっとGIFを表示していると電池の消費が激しいね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Processing】Generative Art風TextEditor</title>
      <link>http://www.ryotaniinomi.com/post/2015/animated_text_editor/</link>
      <pubDate>Sat, 11 Jul 2015 11:41:33 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/animated_text_editor/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../../../images/processing/image_animated_text.png&#34; alt=&#34;&#34; /&gt;
アニメーションする文字を生成するTextEditorぽいもの（TextEditorなんて大層なものじゃない）をつくった。&lt;/p&gt;

&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;ポイントは&lt;code&gt;PGraphics&lt;/code&gt;を使う点だろう。&lt;br /&gt;
&lt;code&gt;PGraphics&lt;/code&gt;とは別画面のようなもの。&lt;br /&gt;
テキストやグラフィックを描画することができるのだが、その結果は画面上には反映されない。&lt;br /&gt;
裏側で仮の描画を行ったり、描画を保存しておいたりする際に使うそう。&lt;br /&gt;
今回はこの&lt;code&gt;PGraphics&lt;/code&gt;を用いてTextEditorをつくる。&lt;/p&gt;

&lt;h4 id=&#34;pgraphicsの生成サンプル&#34;&gt;PGraphicsの生成サンプル&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;PGraphics pg;
void setup() {
    size(400, 400);
    background(0);
    rectMode(CENTER);

    pg = createGraphics(width, height, JAVA2D);
    pg.beginDraw();
    pg.textSize(12);
    pg.textAlign(CENTER, CENTER);
    pg.fill(255);
    pg.text(&amp;quot;Hello&amp;quot;, pg.width/2, pg.height/2);
    pg.endDraw();

    // 描画
    image(pg, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで以下のように描画される。&lt;br /&gt;
シンプルである。&lt;br /&gt;
&lt;img src=&#34;../../../images/processing/image_pgraphics_sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以下に実際のコードを抜粋していく。&lt;/p&gt;

&lt;h3 id=&#34;初期パーティクルの生成&#34;&gt;初期パーティクルの生成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// 画面の分割数
// この値が大きいと点の間隔が狭くなり、細かいパーティクルができる
int gridX = 100;
int gridY = 130;

void initParticles() {
    particles = new ArrayList();

    // 点同士の間隔
    float w = float(width) / gridX;
    float h = float(height) / gridY;

    for (int y = 0; y &amp;lt; gridY; y++) {
        for (int x = 0; x &amp;lt; gridX; x++) {
            // 描画する点の位置
            float vx = w * x;
            float vy = h * y;

            // 点の位置がテキスト内に入ってればパーティクルを生成しリストに保存
            if (isInsideText((int)vx, (int)vy)) {
                Particle particle = new Particle(new PVector(vx, vy));
                particle.display();
                particles.add(particle);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ある点がpgraphicsに描画したグラフィック上に位置するかの判定&#34;&gt;ある点がPGraphicsに描画したグラフィック上に位置するかの判定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;boolean isInsideText(int x, int y) {
    // 座標から取得した点の色が描画色のものと一致するかどうかで判定
    return (pg.get(x, y) == PGRAPHICS_COLOR);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PGraphics#get&lt;/code&gt;でその座標の色を取得できるので、それを使う。&lt;br /&gt;
ちなみに、ここで使っている&lt;code&gt;PGRAPHICS_COLOR&lt;/code&gt;は、&lt;code&gt;PGraphics#fill&lt;/code&gt;で設定する色である。&lt;/p&gt;

&lt;h3 id=&#34;描画&#34;&gt;描画&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;void draw() {
    background(BACKGROUND_COLOR);

    for (int i = 0, len = particles.size(); i &amp;lt; len; i++) {
        Particle baseParticle = particles.get(i);
        PVector baseLocation = baseParticle.getLocation();

        // 点が文字の外に出たら方向を変える
        // TODO：現状はx方向にはみ出たかy方向にはみ出たかの判定ができてないので修正したい
        if (!isInsideText((int)baseLocation.x, (int)baseLocation.y)) {
            baseParticle.updateDir(-1, -1);
        }
        baseParticle.update();
        baseParticle.display();

        // 点同士を線で結ぶ
        for (int k = i+1; k &amp;lt; particles.size(); k++) {
            Particle targetParticle = particles.get(k);
            PVector targetLocation = targetParticle.getLocation();
            // 次の点との距離を計算
            float dist = baseLocation.dist(targetLocation);

            // 処理が閾値以下であれば描画
            if (dist != 0 &amp;amp;&amp;amp; dist &amp;lt; 10) {
                stroke(255, 100);
                strokeWeight(1);
                line(baseLocation.x, baseLocation.y, targetLocation.x, targetLocation.y);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;点の描画を行うparticleクラス&#34;&gt;点の描画を行うParticleクラス&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class Particle {
    PVector location;
    float radius;
    float dirX;
    float dirY;

    Particle(PVector location) {
        this.location = location;
        radius = 4;
        dirX = random(-1, 1);
        dirY = random(-1, 1);
    }

    PVector getLocation() {
        return location;
    }

    // 位置を更新
    void update() {
        PVector velocity = new PVector(dirX, dirY);
        location.add(velocity);
    }

    // 方向を変える（跳ね返り）
    void updateDir(int x, int y) {
        dirX *= x;
        dirY *= y;
    }

    void display() {
        fill(255, 100);
        noStroke();
        ellipse(location.x, location.y, radius, radius);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点の数だけこれをインスタンス化して使う。&lt;/p&gt;

&lt;p&gt;できたものはこれ。&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-6pOM5faOIY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;以上です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nomi1126/processing_work/tree/master/2015_07_05_animationText/animationText&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Processing】眼球を描く</title>
      <link>http://www.ryotaniinomi.com/post/2015/eye/</link>
      <pubDate>Mon, 22 Jun 2015 23:31:52 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/eye/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://p5aholic.hatenablog.com/&#34;&gt;こちらの記事&lt;/a&gt;を参考に眼球を描いてみた。&lt;br /&gt;
&lt;img src=&#34;../../../images/processing/image_eye.gif&#34; alt=&#34;&#34; /&gt;
眼球はマウスカーソルに追従するようになってる。&lt;/p&gt;

&lt;h2 id=&#34;ざっくり解説&#34;&gt;ざっくり解説&lt;/h2&gt;

&lt;p&gt;球体の描き方は↑に丁寧にまとめられてるのでそちらを参照すると良い。&lt;br /&gt;
球体は&lt;code&gt;point()&lt;/code&gt;で円上に配置した点をZ軸の上に半径を変えて重ねている。&lt;br /&gt;
ボールを輪切りにしたようなイメージかも。&lt;br /&gt;
目ん玉の部分は塗りを有効にするために&lt;code&gt;beginShape()&lt;/code&gt;と&lt;code&gt;endShape()&lt;/code&gt;を用いており、&lt;code&gt;vertex()&lt;/code&gt;によって点を描画している。&lt;br /&gt;
眼球描画部分のコードを以下に載せておく。&lt;/p&gt;

&lt;h4 id=&#34;eyeball-pde&#34;&gt;EyeBall.pde&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class EyeBall {

    float radius = 200;
    float dir = 1;
    float val = 0;
    float lastX;
    float lastY;
    float lastZ;

    EyeBall() {}

    void display() {
        val += 5;

        for(int s = 0; s &amp;lt;= 180; s += 10){
            float radianS = s == 0 ? radians(3) : radians(s);
            float expansion = map(sin(radians(val)), -1, 1, 1, 1.5);
            float z = radius * cos(radianS) * expansion;

            // Eye
            if (s &amp;lt;= 20) {
                noStroke();
                if (s == 20) {
                    fill(255, 255, 255, 180);
                } else if (s == 10) {
                    fill(0, 128, 128, 180);
                } else {
                    fill(0, 100);
                }
                // Fill eye
                beginShape();
                for (int t = 0; t &amp;lt;= 360; t += 10) {
                    float radianT = radians(t);
                    float x = radius * sin(radianS) * cos(radianT) * expansion;
                    float y = radius * sin(radianS) * sin(radianT) * expansion;
                    vertex(x, y, z);
                }
                endShape();
            }
            // Oval
            else {
                for(int t = 0; t &amp;lt;= 360; t += 10){
                    float radianT = radians(t);
                    float x = radius * sin(radianS) * cos(radianT) * expansion;
                    float y = radius * sin(radianS) * sin(radianT) * expansion;
                    stroke(0, 128, 128);
                    strokeWeight(3);
                    point(x, y, z);

                    // Connect points with line
                    if (t != 0) {
                        strokeWeight(1);
                        line(x, y, z, lastX, lastY, lastZ);
                    }

                    lastX = x;
                    lastY = y;
                    lastZ = z;
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フルコードは&lt;a href=&#34;https://github.com/nomi1126/processing_work/tree/master/2015_06_21_eye/eye&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Processing】蜘蛛の巣っぽいビジュアルを描く</title>
      <link>http://www.ryotaniinomi.com/post/2015/spider/</link>
      <pubDate>Sat, 20 Jun 2015 21:51:34 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/spider/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../../../images/processing/image_spider.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;流れは以下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多角形の頂点を作成&lt;/li&gt;
&lt;li&gt;多角形になるように頂点を結ぶ線分を作成&lt;/li&gt;
&lt;li&gt;外側から内側の多角形へ頂点を結ぶ線分を作成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各頂点座標にランダム値をプラスすることで微弱な揺れを表現してる&lt;/p&gt;

&lt;h4 id=&#34;spider-pde&#34;&gt;spider.pde&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;ArrayList&amp;lt;Particle&amp;gt;&amp;gt; particleGeneration;  // 各点の位置用
ArrayList&amp;lt;ArrayList&amp;lt;Connection&amp;gt;&amp;gt; connectionGeneration;  // 各点を繋ぐ線用
ArrayList&amp;lt;ArrayList&amp;lt;Connection&amp;gt;&amp;gt; boneGeneration;  // 外から内に向かう線用

int count = 12;
int radius;
int distance = 360 / count;

void setup() {
    size(displayWidth, displayHeight);
    radius = displayHeight / 2;
    particleGeneration = new ArrayList();
    connectionGeneration = new ArrayList();
    boneGeneration = new ArrayList();

    for (int k = 0; radius &amp;gt; 0; k++) {
        ArrayList&amp;lt;Particle&amp;gt; particles = new ArrayList();
        ArrayList&amp;lt;Connection&amp;gt; connections = new ArrayList();

        for (int i = 0; i &amp;lt; count; i++) {
            // 点を作成
            Particle particle = new Particle(new PVector(radius * cos(radians(i*distance)), radius * sin(radians(i*distance))));
            particles.add(particle);

            // 点同士を繋ぐ線を作成
            if (i != 0) {
                Connection connection = new Connection(particle, particles.get(i-1));
                connections.add(connection);
            }
            if (i == count - 1) {
                Connection connection = new Connection(particle, particles.get(0));
                connections.add(connection);
            }
        }

        particleGeneration.add(particles);
        connectionGeneration.add(connections);

        // 外から内に向かう線を作成
        for (int i = 0; i &amp;lt; count; i++) {
            if (k != 0) {
                ArrayList&amp;lt;Connection&amp;gt; bones = new ArrayList();
                Connection bone = new Connection(particleGeneration.get(k).get(i), particleGeneration.get(k-1).get(i));
                bones.add(bone);
                boneGeneration.add(bones);
            }
        }
        radius -= radius * 0.1;
    }
}

void draw() {
    background(0);
    translate(width/2, height/2);
    for (ArrayList&amp;lt;Particle&amp;gt; p : particleGeneration) {
        for (Particle particle : p) {
            particle.update();
            particle.display();
        }
    }
    for (ArrayList&amp;lt;Connection&amp;gt; c : connectionGeneration) {
        for (Connection connection : c) {
            connection.display();
        }
    }
    for (ArrayList&amp;lt;Connection&amp;gt; b : boneGeneration) {
        for (Connection bone : b) {
            bone.display();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;connection-pde&#34;&gt;Connection.pde&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class Connection {
    Particle p1;
    Particle p2;

    Connection(Particle p1, Particle p2) {
        this.p1 = p1;
        this.p2 = p2;
    }

    void display() {
        stroke(255);
        line(p1.getLocation().x, p1.getLocation().y, p2.getLocation().x, p2.getLocation().y);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;particle-pde&#34;&gt;Particle.pde&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class Particle {
    PVector location;
    float radius = 0;
    float moving = 0;
    float maxRange = 5;

    Particle(PVector location) {
        this.location = location;
    }

    PVector getLocation() {
        return location;
    }

    void update() {
        float m = getRandom();
        // ブレ幅を設定
        if (moving + m &amp;lt; maxRange &amp;amp;&amp;amp; moving + m &amp;gt; -maxRange) {
            moving += m;
            location.add(new PVector(m, m));
        }
    }

    float getRandom() {
        return random(-0.5, 0.5);
    }

    void display() {
        fill(255);
        noStroke();
        ellipse(location.x, location.y, radius, radius);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nomi1126/processing_work/tree/master/2015_06_18_spider/spider&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Processing】水中に落ちるボールを再現してみる</title>
      <link>http://www.ryotaniinomi.com/post/2015/fluid_resistance/</link>
      <pubDate>Sun, 31 May 2015 15:15:14 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/fluid_resistance/</guid>
      <description>&lt;p&gt;空中から落としたボールの速度が、水の中に入った瞬間にゆっくりになる様子を再現。&lt;br /&gt;
水中での流体抵抗は&lt;a href=&#34;https://github.com/shiffman/The-Nature-of-Code-Examples/tree/master/chp2_forces/NOC_2_5_fluidresistance&#34;&gt;The Nature of Code Examplesのfluidresistance&lt;/a&gt;を流用し、これに着水時の気泡を加えた。
&lt;img src=&#34;../../../images/processing/image_fluidresistance.gif&#34; alt=&#34;&#34; /&gt;
コードは&lt;a href=&#34;https://github.com/nomi1126/processing_work/tree/master/2015_05_24_fluidresistance/fluidresistance&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Processing】Image transform</title>
      <link>http://www.ryotaniinomi.com/post/2015/processing_image_transform/</link>
      <pubDate>Sun, 24 May 2015 23:53:06 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/processing_image_transform/</guid>
      <description>&lt;p&gt;Processingの勉強としてFORM+CODEの&lt;a href=&#34;http://formandcode.com/code-examples/transform-landscape&#34;&gt;TRANSCODED LANDSCAPE&lt;/a&gt;をカスタマイズしてみた。&lt;br /&gt;
画像の各ピクセルを抽出してその色の値に応じてZ軸の長さを変えている。&lt;br /&gt;
オリジナルからの変更点は、Z軸の長さを&lt;code&gt;sin()&lt;/code&gt;で変更しているところと、カーソル移動で視点を切り替えるところぐらい。
&lt;img src=&#34;../../../images/processing/image_transform.gif&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://github.com/nomi1126/processing_work/blob/master/2015_05_17_image_transform/image_transform/image_transform.pde&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Wear上にパーティクルを書いた</title>
      <link>http://www.ryotaniinomi.com/post/2015/draw_particle_on_wear/</link>
      <pubDate>Mon, 16 Mar 2015 00:09:53 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/draw_particle_on_wear/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nomi1126/artWatch/master/art/art.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nomi1126/SurfaceViewTest&#34;&gt;以前書いたSurfaceViewのコード&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/nomi1126/artWatch&#34;&gt;https://github.com/nomi1126/artWatch&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HUGOをインストールしてみる</title>
      <link>http://www.ryotaniinomi.com/post/2015/install_hugo/</link>
      <pubDate>Mon, 16 Mar 2015 00:07:02 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2015/install_hugo/</guid>
      <description>

&lt;p&gt;ブログはTumblrを使っているのだが、前からStaticSiteGenerator使ってみたいと思ってたので何か入れてみることにした。&lt;br /&gt;
モダンなやつを使いたいってのと、ビルドが早いとの話を聞いたので&lt;a href=&#34;http://gohugo.io/&#34;&gt;HUGO&lt;/a&gt;を試すことにした。&lt;br /&gt;
インストール時に若干手こずったのでメモしておく。&lt;/p&gt;

&lt;h2 id=&#34;インストール手順&#34;&gt;インストール手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;サイト&lt;/a&gt;からzipをダウンロードし、解凍&lt;br /&gt;
Homebrewでも入れれるのだが、僕の場合エラーが出てしまったのでファイルをDLすることにした&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ファイルをリネーム&lt;br /&gt;
解凍後に &lt;code&gt;hugo_0.12_darwin_amd64&lt;/code&gt; みたいな名前の実行ファイルができるので、これを &lt;code&gt;hugo&lt;/code&gt; とかにリネームする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ファイルを移動&lt;br /&gt;
パスを通すために先ほどの &lt;code&gt;hugo&lt;/code&gt; ファイルを &lt;code&gt;/usr/local/bin&lt;/code&gt; に移動する&lt;br /&gt;
これで &lt;code&gt;hugo&lt;/code&gt; コマンドを使えるようになる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;バージョン確認&lt;br /&gt;
&lt;code&gt;hugo version&lt;/code&gt; で &lt;code&gt;Hugo Static Site Generator v0.12&lt;/code&gt; みたいなバージョンが表示されたらOK&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;サイト作成&#34;&gt;サイト作成&lt;/h2&gt;

&lt;p&gt;だいたい&lt;a href=&#34;http://gohugo.io/overview/quickstart&#34;&gt;ここ&lt;/a&gt;の通りに進めればOKだが、ちょこっと書いておく。&lt;/p&gt;

&lt;h3 id=&#34;サイトのルートディレクトリを作成&#34;&gt;サイトのルートディレクトリを作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site ./path/to/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要最低限のファイルが生成される。&lt;br /&gt;
最初、パスのところを&lt;code&gt;./&lt;/code&gt;ではなく&lt;code&gt;/&lt;/code&gt;から始めていて、僕の環境ではmkdirのpermission deniedが発生してちょっとハマったので注意&lt;/p&gt;

&lt;h3 id=&#34;記事の作成&#34;&gt;記事の作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;content/post&lt;/code&gt;以下に作成される。&lt;/p&gt;

&lt;h3 id=&#34;テーマの適用&#34;&gt;テーマの適用&lt;/h3&gt;

&lt;h4 id=&#34;テーマをインストール&#34;&gt;テーマをインストール&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シポジトリ上のすべてのテーマがインストールされるので気に入ったものだけインストるするのが良さそう。&lt;/p&gt;

&lt;h4 id=&#34;適用&#34;&gt;適用&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t /theme内の名前
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;カスタムテーマ作成&#34;&gt;カスタムテーマ作成&lt;/h4&gt;

&lt;p&gt;試してないが、&lt;a href=&#34;http://gohugo.io/themes/creation/&#34;&gt;このへん&lt;/a&gt;に書いてある。&lt;/p&gt;

&lt;h3 id=&#34;確認&#34;&gt;確認&lt;/h3&gt;

&lt;h4 id=&#34;ローカルサーバーを立ち上げて確認&#34;&gt;ローカルサーバーを立ち上げて確認&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://localhost:1313&lt;/code&gt;でアクセスすれば見れるはずだ。&lt;/p&gt;

&lt;h4 id=&#34;テーマを指定して確認&#34;&gt;テーマを指定して確認&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=テーマ名 --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ウォッチ&#34;&gt;ウォッチ&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカルで記事を編集したらブラウザにすぐに反映される。
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;今回はローカル環境でサクッと試しただけだが、&lt;a href=&#34;https://pages.github.com/&#34;&gt;GithubPages&lt;/a&gt;とかにあげればすぐさま公開が可能だろう。&lt;br /&gt;
またこんどやろうと思う。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;追記-2015-02-28-br&#34;&gt;※追記 2015.02.28&lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;ローカルでのwatchのところで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば編集内容が即座に反映されると書いたが、自分のローカル環境だとこれだけでは反映されなかった。
下記のようにテーマを指定して行えば反映されるようになった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hugo-incorporated --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根本原因まで調べてないが、ちゃんとテーマを設定して公開すれば大丈夫なのかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014年の振り返り</title>
      <link>http://www.ryotaniinomi.com/post/2014/year_summary/</link>
      <pubDate>Mon, 16 Mar 2015 00:02:12 +0900</pubDate>
      
      <guid>http://www.ryotaniinomi.com/post/2014/year_summary/</guid>
      <description>

&lt;p&gt;2014年ももう最終日だ。&lt;br /&gt;
今年もやはりいろんな変化があり、いろんなチャレンジもできたのでその振り返りをしておこうと思う。&lt;br /&gt;
ざっと振り返った印象的な出来事は以下かな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular.jsでサービス開発&lt;/li&gt;
&lt;li&gt;イベントへの参加&lt;/li&gt;
&lt;li&gt;フィジカルコンピューティングWG&lt;/li&gt;
&lt;li&gt;AWAに異動&lt;/li&gt;
&lt;li&gt;本格的なAndroid開発&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angular-jsでサービス開発&#34;&gt;Angular.jsでサービス開発&lt;/h1&gt;

&lt;h3 id=&#34;新しい技術&#34;&gt;新しい技術&lt;/h3&gt;

&lt;p&gt;今まで開発してきたアメーバ大喜利の一部メンバーで新しいキュレーションメディアの開発を始めるタイミングでAndgular.jsをいじることになる。&lt;br /&gt;
この３ヶ月前くらいに大喜利にフレームワークを導入しようとしたとき、Angularも検討して少し実装してみたがディレクティブ周りでうまくいかずに諦めた経緯があっただけにちょっと不安だったが、同じキュレーションメディアの先輩がボイラーテンプレート的なものを作っていたので、それを参考にしながらつくることができた。&lt;br /&gt;
Angularはまわりでちらほら言われているように最初の学習コストは結構高くて、それを超えると一気に速度がアップするものだ。&lt;br /&gt;
そして、その後にまた壁が現れて、それ超えるとスピードアップして…とアップダウンが激しいフレームワークだ。&lt;br /&gt;
短い期間であったがそれをかるーく体感することができた。&lt;br /&gt;
大抵の物事はなんでもそうだが、かなり根気が必要なのものだと思った。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;英語&#34;&gt;英語&lt;/h3&gt;

&lt;p&gt;同時にこのへんからAngularについて調べ物をするときに英語のリソースを積極的に見るようになった。&lt;br /&gt;
今までのjQueryをメインにしたJavascript開発では日本語リソースだけで全然事足りていたのでわざわざ英語のサイトをみる必要がなかったが、Angularのような新しい技術についてはまだまだ日本語のリソースは少ないので必然的に英語のサイトをみる必要が出てきた。&lt;br /&gt;
これまで英語サイトには結構抵抗があったが、この経験のおかげで今では英語のリソースを優先的にチェックするほどまでにそのありがたみを感じるようになった。&lt;br /&gt;
やはり、話せるとまではいかずとも読めるスキルはエンジニアには確実に必要だと思う。
&lt;br /&gt;
このプロジェクトの後に&lt;code&gt;Vue.js&lt;/code&gt; + &lt;code&gt;Component&lt;/code&gt; + &lt;code&gt;Gulp.js&lt;/code&gt;という構成でまた新規サービスの開発をスタートさせるが、これはのちに立ち上がる新会社AWAに僕が異動することになるので途中で離れている。&lt;br /&gt;
これらの技術も当時はかなり情報が少なかったのでベースが出来上がるまでになかなか苦労した。。。&lt;/p&gt;

&lt;h1 id=&#34;イベントへの参加&#34;&gt;イベントへの参加&lt;/h1&gt;

&lt;p&gt;これまでイベントと呼ばれるものに参加したことがなかったわけではないが、社内だけでなく外部との関わりの必要性を感じ始めたことから積極的に参加するようになったが今年。&lt;br /&gt;
&lt;a href=&#34;http://www.study-mail.info/&#34;&gt;Study Mail&lt;/a&gt;とかに登録してイベント情報を積極的にキャッチするようにし、技術の勉強会からテック系やセミナーっぽいものまでいろんなイベントに参加した。&lt;br /&gt;
まぁ、勉強会自体は意味のあるものからそうでないものまでいろいろあるが、そこに来ている人たちと交流をしていろんな世界を知るという意味では良い機会の方が多かった気がする。&lt;br /&gt;
実際、それがきっかけで会社に呼んで頂いたこともあった。&lt;br /&gt;
来年からは登壇する側としても参加してみたいと思った。&lt;/p&gt;

&lt;h1 id=&#34;フィジカルコンピューティングwg&#34;&gt;フィジカルコンピューティングWG&lt;/h1&gt;

&lt;p&gt;業務とは関係なくあるテーマに沿って制作を行うワーキンググループなるものがあり、僕はフィジカルコンピューティングをテーマとしたチームに入った。&lt;br /&gt;
このチームでは、個人で自由にフィジカルコンピューティングに関連した作品をつくるということだったので僕は「植物とインタラクションできる作品」を作った。&lt;br /&gt;
電子工作要素は少なかったが、普段の業務ではできないことなので新鮮だったし楽しかった。&lt;br /&gt;
今後もこういう活動は続けていこうと思う。&lt;/p&gt;

&lt;h1 id=&#34;awaに異動&#34;&gt;AWAに異動&lt;/h1&gt;

&lt;h3 id=&#34;新会社awa&#34;&gt;新会社AWA&lt;/h3&gt;

&lt;p&gt;avexと共同出資の新会社に異動になった。&lt;br /&gt;
このプロジェクトは、社内の首席エンジニアと若手の勢いあるエンジニアからなる少数精鋭のチームということでかなりモチベーションあがった。&lt;br /&gt;
しかも、デザインとかインタラクション面で「カッコイイもの」を作れる弊社では希少な環境ということもあり、息巻いていた記憶がある。&lt;br /&gt;
自分はこのチームでAndroidを担当することになる。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;まさにベンチャーな進め方&#34;&gt;まさにベンチャーな進め方&lt;/h3&gt;

&lt;p&gt;最初はデザイナーも不在だったので、とりあえずデザイン込みのモックをひたすらつくるということをしていた。&lt;br /&gt;
僕以外のメンバーも皆新しい技術に挑戦するということだったので勉強も兼ねてこのようなスタイルで進めていた。&lt;br /&gt;
しかし、さすが大企業２社によるジョイントベンチャー。話が全然進まず、仕様変更、デザイン変更、３ヶ月経っても未だダミーデータという不安だらけのまま時間が過ぎることになる。&lt;br /&gt;
「暗闇でジャンプ」とはまさに今の自分たちに最適なスローガンだなと思った。&lt;/p&gt;

&lt;h1 id=&#34;本格的なandroid開発&#34;&gt;本格的なAndroid開発&lt;/h1&gt;

&lt;h3 id=&#34;androidエンジニアに転向&#34;&gt;Androidエンジニアに転向&lt;/h3&gt;

&lt;p&gt;前述のAWAに異動になったタイイングでこれまでずっと続けてきたフロントエンドの開発からAndroid開発に移った&lt;br /&gt;
ネイティブに移った理由としては、ブラウザでの表現に限界を感じたのが大きい。（弊社サービスの特性＋ブラウザの描画性能が理由でコミュニティサービスでリッチなインタラクションが求められるケースは少なかった。）&lt;br /&gt;
ネイティブに関してはiOSという選択肢もあったが、その中でもAndroidにした理由は、ちょうどGoogleからWearとかAutoが発表された時期だし、オープンソースで自由に面白いものが作れそうということからだ。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;javaを勉強し始める&#34;&gt;Javaを勉強し始める&lt;/h3&gt;

&lt;p&gt;これまでJavascriptを用いたフロントエンド開発をしてきたので、Javaみたいなしっかりしたクラスベースの言語の開発に慣れるまでにちょっと時間がかかった。&lt;br /&gt;
でもまぁ、慣れれば心地よく感じるもので、コンパイルエラーを吐いてくれるところや、IDEの充実した補完機能は今や手放せないものになっている。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;初めてdb-ローカル-を設計する&#34;&gt;初めてDB（ローカル）を設計する&lt;/h3&gt;

&lt;p&gt;フロントをやっていた頃はDBなんてサーバの人に任せていたが、ネイティブではネット未接続環境対応＆表示の高速化のために端末自体にローカルDBを構築しておき、データをキャッシュしておく必要がある。&lt;br /&gt;
そのためにDBに関する知識が必要だったので、RDB、ORM、SQL等の用語を覚えた。&lt;br /&gt;
webのフロントもそうだが、ネイティブもカバー領域が広くて大変だなと思った。&lt;/p&gt;

&lt;h1 id=&#34;振り返り&#34;&gt;振り返り&lt;/h1&gt;

&lt;p&gt;特に大きな変化は、Androidを始めたことだろう。&lt;br /&gt;
これまでのフロント的な実装とは大きく異なるJavaのクラスベースの手法にはかなり苦しんだが、勉強になることが多く、非常に良かったと思っている。&lt;br /&gt;
あと、Android開発のきっかけになったAWAではとにかく「カッコイイもの」を目指しているという点が開発のモチベーションとしてかなり大きい。&lt;br /&gt;
最近では技術にもかなり興味があるが、やはり自分は技術を用いて作られたサービスや作品にこそ興味があるのだと改めて思った。&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&#34;2015年の目標&#34;&gt;2015年の目標&lt;/h1&gt;

&lt;p&gt;来年は仕事に加えてプライベートワークをもっと充実させていこうと思う。&lt;br /&gt;
今考えているものも形にしていけたらと思う。&lt;br /&gt;
あとは、英語かな。&lt;br /&gt;
ざっと挙げると以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWAのヒット&lt;/li&gt;
&lt;li&gt;今考えているアイデアのプロトタイプをつくる&lt;/li&gt;
&lt;li&gt;月１で何かしらの作品をこのブログに載せる&lt;/li&gt;
&lt;li&gt;外人と英語で日常会話できるようになる&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上、来年も宜しくお願いします。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>